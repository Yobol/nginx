#!/bin/sh

# Copyright (C) Igor Sysoev
# Copyright (C) Nginx, Inc.


LC_ALL=C
export LC_ALL

# 处理 configure 命令的参数，如参数是 --help 的话，会显示支持的所有参数格式
# options 脚本会定义后续工作要使用的变量，并根据本次参数以及默认值设置这些变量
# . 表示占位符，后跟一个文件路径，表示将文件中的内容替换到当前位置
. auto/options
# 初始化后续将产生的文件路径
. auto/init
# 分析 Nginx 的源码结构以构造后续的 Makefile 文件
. auto/sources

# 编译过程中所有的目标文件生成的路径由 --builderdir=DIR 参数指定
# 默认情况下为 <nginx-source>/objs
# 注：test 用于检查某个条件是否成立， -d 如果文件存在且为目录则为真
test -d $NGX_OBJS || mkdir -p $NGX_OBJS  # 判断 <nginx-source>/objs 目录是否存在，如果不存在则新建

echo > $NGX_AUTO_HEADERS_H
echo > $NGX_AUTOCONF_ERR

# 向 objs/ngx_auto_config.h 中写入命令行带的参数
echo "#define NGX_CONFIGURE \"$NGX_CONFIGURE\"" > $NGX_AUTO_CONFIG_H


# 判断 DEBUG 标志，如果有则在 bjs/ngx_auto_config.h 中写入 DEBUG 宏
if [ $NGX_DEBUG = YES ]; then
    have=NGX_DEBUG . auto/have
fi


# 检查操作系统参数是否支持后续编译
# test -z 判断字符串长度是否为零
if test -z "$NGX_PLATFORM"; then  # 判断 $NGX_PLATFORM 是否被设置为具体的平台类型
    echo "checking for OS"

    NGX_SYSTEM=`uname -s 2>/dev/null`
    NGX_RELEASE=`uname -r 2>/dev/null`
    NGX_MACHINE=`uname -m 2>/dev/null`

    echo " + $NGX_SYSTEM $NGX_RELEASE $NGX_MACHINE"

    NGX_PLATFORM="$NGX_SYSTEM:$NGX_RELEASE:$NGX_MACHINE";

    case "$NGX_SYSTEM" in
        MINGW32_* | MINGW64_* | MSYS_*)
            NGX_PLATFORM=win32
        ;;
    esac

else
    echo "building for $NGX_PLATFORM"
    NGX_SYSTEM=$NGX_PLATFORM
fi

# 检查并设置编译器，如 GCC 是否安装， GCC 版本是否支持后续编译
. auto/cc/conf

# 对非 windows 系统定义一些必要的头文件，并检查其是否存在，以此决定 configure 后续步骤是否可以成功
# 在 configure 脚本中检查某个特性是否存在时，会生成一个最简单的值包含 main 函数的 C 程序，
# 该程序会包含像音符的头文件，然后检查是否可以通过编译来确认特性是否支持，并将结果记录在 objs/autoconf.err 文件中
if [ "$NGX_PLATFORM" != win32 ]; then
    . auto/headers
fi

# 对于当前操作系统，定义一些与操作系统相关的方法并检查当前环境是否支持
. auto/os/conf

# 定义类 UNXI 操作系统中通用的头文件和系统调用等，并检查当前环境是否支持
if [ "$NGX_PLATFORM" != win32 ]; then
    . auto/unix
fi

. auto/threads
# 最核心的构造运行期 modules 的脚本。
# 该脚本会生成 ngx.modules.c 文件，该文件会被编译进 Nginx 中，其唯一做的事情就是定义了 ngx_modules 数组。
# ngx_modules 数组指明了 Nginx 运行期间有哪些模块会参与到请求的处理中，包括 HTTP 请求可能会使用哪些模块处理。
. auto/modules
# 检查 Nginx 在链接期间需要的第三方静态库，动态库或者目标文件是否存在
. auto/lib/conf

# 处理 NGINX 安装路径
case ".$NGX_PREFIX" in
    .)
        NGX_PREFIX=${NGX_PREFIX:-/usr/local/nginx}
        have=NGX_PREFIX value="\"$NGX_PREFIX/\"" . auto/define
    ;;

    .!)
        NGX_PREFIX=
    ;;

    *)
        have=NGX_PREFIX value="\"$NGX_PREFIX/\"" . auto/define
    ;;
esac

# 处理 NGINX conf 文件路径
if [ ".$NGX_CONF_PREFIX" != "." ]; then
    have=NGX_CONF_PREFIX value="\"$NGX_CONF_PREFIX/\"" . auto/define
fi

have=NGX_SBIN_PATH value="\"$NGX_SBIN_PATH\"" . auto/define
have=NGX_CONF_PATH value="\"$NGX_CONF_PATH\"" . auto/define
have=NGX_PID_PATH value="\"$NGX_PID_PATH\"" . auto/define
have=NGX_LOCK_PATH value="\"$NGX_LOCK_PATH\"" . auto/define
have=NGX_ERROR_LOG_PATH value="\"$NGX_ERROR_LOG_PATH\"" . auto/define

have=NGX_HTTP_LOG_PATH value="\"$NGX_HTTP_LOG_PATH\"" . auto/define
have=NGX_HTTP_CLIENT_TEMP_PATH value="\"$NGX_HTTP_CLIENT_TEMP_PATH\""
. auto/define
have=NGX_HTTP_PROXY_TEMP_PATH value="\"$NGX_HTTP_PROXY_TEMP_PATH\""
. auto/define
have=NGX_HTTP_FASTCGI_TEMP_PATH value="\"$NGX_HTTP_FASTCGI_TEMP_PATH\""
. auto/define
have=NGX_HTTP_UWSGI_TEMP_PATH value="\"$NGX_HTTP_UWSGI_TEMP_PATH\""
. auto/define
have=NGX_HTTP_SCGI_TEMP_PATH value="\"$NGX_HTTP_SCGI_TEMP_PATH\""
. auto/define

# 创建编译时使用的 objs/Makefile 文件
. auto/make
# 为 objs/Makefile 文件加入需要链接的第三方静态库，动态库或目标文件
. auto/lib/make
# objs/Makefile 文件加入 install 功能，当执行 make install 时将编译生成的必要文件复制到安装路径，建立必要的目录
. auto/install

# STUB
. auto/stubs

# 在 ngx_auto_config.h 文件中指定 NGX_USER 和 NGX_GROUP 宏，如果执行 configure 时没有参数指定，默认为 nobody
have=NGX_USER value="\"$NGX_USER\"" . auto/define
have=NGX_GROUP value="\"$NGX_GROUP\"" . auto/define

if [ ".$NGX_BUILD" != "." ]; then
    have=NGX_BUILD value="\"$NGX_BUILD\"" . auto/define
fi

# 显示 configure 执行的结果
. auto/summary
